import pylab as pl
import pickle
import numpy as np
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_lfw_people
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.decomposition import PCA as RandomizedPCA
from sklearn.svm import SVC


# Generated by counterfit #

from counterfit.core.targets import Target

class Faces(Target):
    target_name = "Faces"
    target_data_type = "image"
    target_endpoint = "finalized_model.sav"
    target_input_shape = (50, 37)
    target_output_classes = ['Ariel Sharon', 'Colin Powell', 'Donald Rumsfeld', 'George W Bush',
       'Gerhard Schroeder', 'Hugo Chavez', 'Tony Blair']
    target_classifier = "BlackBox"
    sample_input_path = f"FacesData.npz"
    X = []

    def load(self):
        self.data = np.load(self.fullpath(self.sample_input_path), allow_pickle=True)
        self.X = self.data["X"].astype(np.float32) 
        self.model = pickle.load(open(self.fullpath(self.target_endpoint),'rb'))

    def get_device(self):
        return 'cpu'

    def predict(self, x_batch):
        nx = []
        for row in x_batch:
            nx.append(row.flatten())
        nx = np.array(nx)
        h, w = 50, 37
        n_components = 50
        pca = RandomizedPCA(n_components=n_components, whiten=True).fit(self.X)
        eigenfaces = pca.components_.reshape((n_components, h, w))
        X_batch_pca = pca.transform(nx)
        arr = self.model.predict_proba(X_batch_pca)
        return arr.tolist()  # return a list of class probabilities
